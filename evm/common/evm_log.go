// Copyright 2014 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package common

import (
	"github.com/ethereum/go-ethereum/common"
)

// StorageLog represents a contract log event. These events are generated by the LOG opcode and
// stored/indexed by the node.
type StorageLog struct {
	// Consensus fields:
	// address of the contract that generated the event
	Address common.Address `json:"address"`
	// list of topics provided by the contract.
	Topics []common.Hash `json:"topics"`
	// supplied by the contract, usually ABI-encoded
	Data []byte `json:"data"`
}

func (self *StorageLog) Serialization(sink *ZeroCopySink) {
	sink.WriteAddress(Address(self.Address))
	sink.WriteUint32(uint32(len(self.Topics)))
	for _, t := range self.Topics {
		sink.WriteHash(Uint256(t))
	}
	sink.WriteVarBytes(self.Data)
}

func (self *StorageLog) Deserialization(source *ZeroCopySource) error {
	address, _ := source.NextAddress()
	self.Address = common.Address(address)
	l, _ := source.NextUint32()
	self.Topics = make([]common.Hash, 0, l)
	for i := uint32(0); i < l; i++ {
		h, _ := source.NextHash()
		self.Topics = append(self.Topics, common.Hash(h))
	}
	data, err := source.ReadVarBytes()
	if err != nil {
		return err
	}
	self.Data = data

	return nil
}
